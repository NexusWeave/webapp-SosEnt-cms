@use 'sass:map';
@use '../colors/colors' as color

@use '../mappings/tags' as tags
@use '../mappings/icons' as icon
@use '../mappings/flexbox' as flexbox-mapping
@use '../mappings/devices-breakpoints' as devices

@mixin grid-layout()
    grid-template-rows: 100%
    grid-template-columns: 1fr
    grid-template-areas: "content"

    @include media-queries($breakpoint: 'M')
        font-size: 1.3em

    @include media-queries($breakpoint: 'L')
        gap: 1em
        display: grid
        grid-template-areas: "content cta"
        grid-template-columns: minmax(0, 2fr) minmax(0, 1fr)

    @include media-queries($breakpoint: 'XXL')
        grid-template-areas: "image content cta"
        grid-template-columns: minmax(0, 1fr) minmax(0, 2fr) minmax(0, 1fr)
        //box-shadow: 0 0 10px rgba(color.$Groovy-brown, .2)
    
    .main-grid
        grid-area: content

    .main-grid, .aside-grid
        @include media-queries($breakpoint: 'XXL')
            text-align: justify
    
    .aside-grid
        overflow: hidden
        @include media-queries($breakpoint: 'L')
            block-size: 0
            grid-area: cta
            overflow: visible
            max-inline-size: 24em

    .figure-grid
        grid-row: auto
        grid-area: image

@mixin media-queries ($size: null, $breakpoint: null)

    @if $breakpoint == 'prefers-color-scheme' and $size == null
        @media (prefers-color-scheme: dark)
            @content

    @else if $breakpoint == 'S' or $breakpoint == 'M' or $breakpoint == 'L' or $breakpoint == 'XL' or $breakpoint == '2XL' or $breakpoint == '3XL'
        $size: map.get(devices.$breakpoints, $breakpoint)
        @media screen and (min-width: $size)
            @content

    @else if $size == null and $breakpoint != null
        $block-size: map.get(devices.$devices, $breakpoint, 'block-size')
        $inline-size: map.get(devices.$devices, $breakpoint, 'inline-size')

        @media screen and ($inline-size <= width <= $inline-size + 50px ) and (min-height: $block-size) and (orientation: portrait)
            @content

        @media screen and ($block-size <= height <= $block-size + 50px) and (min-width: $inline-size) and (orientation: landscape)
            @content

    @if $size != null and $breakpoint == null
        @media screen and (min-width: $size)
            @content

@mixin apply-theme-colors($bg-color, $border, $text-color)

    $color-border: $border
    border: $border
    color: $text-color
    border-radius: 0.5em
    background-color: $bg-color

    h1, h2
        font-weight: 600
    
    h1
        @include media-queries($breakpoint: 'M')
            font-size: 4em

    h3 > a
            font-size: 1.5em
            font-weight: bold
    
@mixin light-component-theme($color, $padding-block: .5em)

    $color-text: color.$soft-white
    $color-link: rgba($color, 0.6)
    $color-border: rgba($color, 0.2)
    $bg-color: rgba($color, 0.1)


    @if  $color == color.$Groovy-brown
        $bg-color: rgba($color, 1)
        $color-link: color.$Groovy-yellow
        $color-text: rgba(color.$soft-white, 0.8)
        $color-border: rgba(color.$Groovy-orange, 0.2)
        

    p
        padding-block-start: $padding-block

    img
        padding-block-start: $padding-block
    
    h1, h2, h3, h4, h5, h6
        font-weight: bold
        color: rgba($color-text, 1)
        padding-block-start: $padding-block

    border-radius: 0.5em
    @include background-color($bg-color, $color-text, $color-link)

@mixin generate-btn($bg-color, $text-color, $link-color)

    margin: 0.5em
    font-size: 1em
    font-weight: bold
    padding: 0.5em 1em
    border-radius: 0.5em
    border: 1px solid color.$Groovy-brown
    @include background-color($bg-color, $text-color, $link-color)


@mixin link-color($color, $font-size, $color-hover, $color-active, $color-visited)

    $color: rgba($color, 1)
    a[aria-disabled="true"]
        color: #a0a0a0
        cursor: not-allowed
        pointer-events: none
        text-decoration: none

    a
        color: $color
        font-size: $font-size
        text-decoration: none

        &:active
            color: $color-active
        
        &.external-link
            text-decoration: underline

        @media (hover: hover)

            &:hover
                color: $color-hover
                border-radius: 0.5em

        h1, h2, h3, h4, h5, h6
            color: $color !important

@mixin background-color($bg-color, $text-color, $link-color:null, $font-size: null, $color-hover: null, $color-active: null, $color-visited: null)

    @if $font-size == null
        $font-size: 1em

    @if not $link-color
        $link-color: $text-color

    @if $link-color == color.$Groovy-yellow
        $color-active: rgba(color.$Groovy-green, 1) !important
        $color-hover: rgba(color.$Groovy-green, 0.8) !important
        $color-visited: rgba(color.$Groovy-orange, 0.3) !important

    @else if $link-color == color.$Groovy-orange
        $color-active: rgba(color.$Groovy-green, 1) !important
        $color-hover: rgba(color.$Groovy-green, 0.8) !important
        $color-visited: rgba(color.$Groovy-orange, 0.3) !important

    @if $color-hover == null
        $color-hover: rgba($link-color, 0.8)

    @if $color-active == null
        $color-active: rgba($link-color, 1)
    
    @if $color-visited == null
        $color-visited: rgba($link-color, 0.3)

    color: rgba($text-color, 1)
    background-color: rgba($bg-color, 1)


    @include link-color($link-color, $font-size, $color-hover, $color-active, $color-visited)

@mixin font($size, $font-family: 'Nunito', $line-height: null)

    @if $line-height == null
        $line-height: 1.6

    @if $font-family == null
        $font-family: 'Nunito', sans-serif


    font-size: $size
    font-family: $font-family
    line-height: $line-height

@mixin transitions($property: null, $duration: null, $timing-function: null)

    @if $property == null
        $property: all
    
    @if $timing-function == null
        $timing-function: ease-in-out

    @if $duration == null
        $duration: 0.3s

    transition: $property $duration $timing-function
    -o-transition: $property $duration $timing-function
    -moz-transition: $property $duration $timing-function
    -webkit-transition: $property $duration $timing-function

@mixin flexbox-generator($flexbox-type)
    
    $props: map.get(flexbox-mapping.$flexbox, $flexbox-type)

    @if $props
        @each $property, $value in $props
            #{$property}: $value
    @else
        @error '"#{$flexbox-type}" not found in flexbox mapping.'

@mixin icon-generator()

    @each $icon, $props in icon.$icons
        .#{$icon}
            font-family: "Bootstrap-icons"
            .icon
                font-size: 1em
                display: inline-block
                
                content: map.get($props, icon)
                color : map.get($props, icon-color)

                &::before
                    padding: 0.5em
                    content: map.get($props, icon)
                    color : map.get($props, icon-color)

@mixin tag-generator()

    @each $tag, $props in tags.$tags
        .#{$tag}
            margin-inline: 1em
            padding: 0.5em 0.5em
            border-radius: 0.5em
            display: inline-block
            @include background-color(map.get($props, bg-color), map.get($props, txt-color), map.get($props, link-color))

        span.tags
            font-size: 0.7em
            font-weight: bold